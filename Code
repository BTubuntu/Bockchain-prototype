// A Blockchain Basic Prototype


class Block {
 constructor(Data) {
•	 Timestamp is the timestamp of the time when the block is created.
•	 Data is the valuable information which we want to store.
•	 PrevBlockHash hash string of previous block
•	 Hash hash of current block
this.Timestamp; //number
   this.Data = Data; //string
   this.PrevBlockHash; //string
   this.Hash; //string
 }
 ...
}
import sha256 from 'js-sha256';

class Block {
 constructor(Data, PrevBlockHash) {
   this.Timestamp = this.getCurrentTimestamp();
   this.Data = Data;
   this.PrevBlockHash = PrevBlockHash;
   this.Hash = this.setHash();
 }
 
 getCurrentTimestamp() {
  return Math.floor(Date.now() / 1000);
 }
 
 setHash() {
  const headers = `${this.PrevBlockHash}${this.Data}${this.Timestamp}`;
  const hash = sha256(headers);
  return hash;
 }
 
 getHash() {
  return this.Hash;
 }
}
Les's create our first block of our blockchain -
const Block0 = new Block('This is new data', 'PREVIOUS_BLOCK_HASH');


 NODE0  NODE1  NODE2  NODE3
class Blockchain {
 constructor() {
  this.blocks = [] // array of Blocks
 }
 ...
}
 Implement the function to add new block
class Blockchain {
 constructor() {
  this.blocks = [] // array of Blocks
  }
  
  /**
   * Function to add new block to blockchain 
   * data {string} - valuable data, which we want to store in block
   **/
  addBlock(data) {
    const prevBlock = this.blocks[this.blocks.length - 1];
    const newBlock = new Block(data, prevBlock.getHash());
    this.blocks = this.blocks.push(newBlock); // push new block to blockchain
  }
 }

class Blockchain {
 constructor() {
  this.blocks = this.initializeBlockchain();
  }
   /**
   * Function to initialize blockchain
   * by creating genesis block
   **/
  initializeBlockchain() {
   return [new Block('Genesis Block', '')];
  }
  
  /**
   * Function to add new block to blockchain 
   * data {string} - valuable data, which we want to store in block
   **/
  addBlock(data) {
    const prevBlock = this.blocks[this.blocks.length - 1];
    const newBlock = new Block(data, prevBlock.getHash());
    this.blocks = this.blocks.push(newBlock); // push new block to blockchain
  }
 }



